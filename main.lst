CCS PCM C Compiler, Version 5.008, 5967               07-nov-16 10:47

               Filename:   E:\T2_Projetos\Firmware\main.lst

               ROM used:   67 words (1%)
                           Largest free fragment is 2048
               RAM used:   7 (2%) at main() level
                           8 (2%) worst case
               Stack used: 1 locations
               Stack size: 8

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   018
0003:  NOP
.................... //all these # below set up the PIC 
.................... #include <16F877A.h> 
.................... //////// Standard Header file for the PIC16F877A device //////////////// 
.................... #device PIC16F877A 
....................  
.................... #list 
....................  
.................... #device adc=8 
.................... #FUSES NOWDT      //No Watch Dog Timer 
.................... #FUSES HS         //Highspeed Osc > 4mhz 
.................... #FUSES PUT        //Power Up Timer 
.................... #FUSES NOPROTECT  //Code not protected from reading 
.................... #FUSES NODEBUG    //No Debug mode for ICD 
.................... #FUSES NOBROWNOUT //No brownout reset 
.................... #FUSES NOLVP      //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... #FUSES NOCPD      //No EE protection 
.................... #use delay(clock=20000000)             // Sets crystal oscillator at 20 megahertz 
0004:  MOVLW  22
0005:  MOVWF  04
0006:  BCF    03.7
0007:  MOVF   00,W
0008:  BTFSC  03.2
0009:  GOTO   017
000A:  MOVLW  06
000B:  MOVWF  78
000C:  CLRF   77
000D:  DECFSZ 77,F
000E:  GOTO   00D
000F:  DECFSZ 78,F
0010:  GOTO   00C
0011:  MOVLW  7B
0012:  MOVWF  77
0013:  DECFSZ 77,F
0014:  GOTO   013
0015:  DECFSZ 00,F
0016:  GOTO   00A
0017:  RETURN
.................... #use rs232(baud=9600, xmit=PIN_C6, invert) //Sets up serial port output pin & baud rate 
....................  
.................... //main program starts here 
.................... void main() { 
0018:  MOVF   03,W
0019:  ANDLW  1F
001A:  MOVWF  03
001B:  MOVLW  FF
001C:  MOVWF  20
001D:  BCF    20.6
001E:  MOVF   20,W
001F:  BSF    03.5
0020:  MOVWF  07
0021:  BCF    03.5
0022:  BCF    07.6
0023:  BSF    03.5
0024:  BSF    1F.0
0025:  BSF    1F.1
0026:  BSF    1F.2
0027:  BCF    1F.3
0028:  MOVLW  07
0029:  MOVWF  1C
002A:  BCF    03.7
....................    //Infinite program loop starts.  LED blinks forever. 
....................    while(true){ 
....................       output_high(PIN_B7);    //send a "1" to pin RB7, making RB7 "High" at 5v 
002B:  BCF    06.7
002C:  BCF    03.5
002D:  BSF    06.7
....................             //this will turn on the LED hooked to RB7 
....................       delay_ms(500);        //wait half a second, delays for 500ms  
002E:  MOVLW  02
002F:  MOVWF  21
0030:  MOVLW  FA
0031:  MOVWF  22
0032:  CALL   004
0033:  DECFSZ 21,F
0034:  GOTO   030
....................       output_low(PIN_B7);     //send a "0" to pin RB7, making RB7 "Low" at 0v 
0035:  BSF    03.5
0036:  BCF    06.7
0037:  BCF    03.5
0038:  BCF    06.7
....................       delay_ms(500);      //wait half a second, delays for 500ms 
0039:  MOVLW  02
003A:  MOVWF  21
003B:  MOVLW  FA
003C:  MOVWF  22
003D:  CALL   004
003E:  DECFSZ 21,F
003F:  GOTO   03B
0040:  BSF    03.5
0041:  GOTO   02B
....................    } 
.................... } 
....................  
0042:  SLEEP
.................... /*Notes 
.................... You can easily add more LEDs and make them flash in different patterns. 
.................... For more readable code, use 
.................... #define RED_LED   PIN_B7 
.................... #define GREEN_LED PIN_B6 
.................... … 
.................... … 
.................... output_high(RED_LED); 
.................... output_high(GREEN_LED);     
.................... */ 

Configuration Fuses:
   Word  1: 3F32   HS NOWDT PUT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
